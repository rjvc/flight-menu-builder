(()=>{var e={577:e=>{"use strict";e.exports=require("cors")},818:e=>{"use strict";e.exports=require("dotenv")},252:e=>{"use strict";e.exports=require("express")},449:e=>{"use strict";e.exports=require("pg")},896:e=>{"use strict";e.exports=require("fs")},928:e=>{"use strict";e.exports=require("path")}},s={};function r(t){var o=s[t];if(void 0!==o)return o.exports;var a=s[t]={exports:{}};return e[t](a,a.exports,r),a.exports}r(818).config();const t=r(252),o=r(577),{Pool:a}=r(449),n=r(928),c=r(896),i=t(),d=process.env.PORT||3001;let l;try{l=c.readFileSync("ca.pem").toString(),console.debug("CA Certificate Loaded Successfully")}catch(e){console.error("Error reading CA certificate:",e)}const m=new a({user:process.env.PGUSER,host:process.env.PGHOST,database:process.env.PGDATABASE,password:process.env.PGPASSWORD,port:process.env.PGPORT,ssl:{rejectUnauthorized:!0,ca:l}});m.connect(((e,s,r)=>{e?console.error("Error connecting to the database:",e.stack):(console.debug("Connected to the database successfully"),r())})),i.use(t.json()),i.use(o({origin:"http://localhost:3000"})),i.use(((e,s,r)=>{console.log(`Incoming request: ${e.method} ${e.url}`),r()}));const u=async(e,s,r)=>{if(r&&Array.isArray(r)){const t=r.map((r=>m.query(`INSERT INTO ${e} (meal_id, ${e.slice(5,-1)}_id) VALUES ($1, $2)`,[s,r])));await Promise.all(t)}};i.post("/api/save-meal-data",(async(e,s)=>{const{name:r,email:t,airport:o,numPassengers:a,numCrew:n,mealType:c,selectedMeals:i,breakfastType:d,foodPreferences:l,dietaryRestrictions:p,drinkPreference:f,device:y,timestamp:g}=e.body;console.debug("Received meal data:",e.body);try{const e=(await m.query("INSERT INTO meals (\n                name, email, airport, num_passengers, num_crew, breakfast_type, \n                drink_preference, device, timestamp\n            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING id",[r,t,o,a,n,d,f,y,g])).rows[0].id;console.debug("Inserted meal data with ID:",e),await u("meals_meal_types",e,c),await u("meals_selected_meals",e,i),await u("meals_food_preferences",e,l),await u("meals_dietary_restrictions",e,p),s.status(200).json({message:"Meal data saved successfully!"})}catch(e){console.error("Error saving data:",e.stack),s.status(500).json({message:"Error saving data",error:e.message})}})),i.get("/api/menu/:id",(async(e,s)=>{const r=e.params.id;console.log(`Fetching menu data for ID: ${r}`);try{const e=await m.query("SELECT * FROM meals WHERE id = $1",[r]);if(console.debug("Fetched meal data:",e.rows),0===e.rowCount)return s.status(404).json({message:"Menu not found"});const t=e.rows[0],o=await m.query("SELECT mt.id, mt.name\n             FROM meals_meal_types mmt\n             JOIN meal_types mt ON mmt.meal_type_id = mt.id\n             WHERE mmt.meal_id = $1",[r]);console.debug("Fetched meal types:",o.rows);const a=await m.query("SELECT sm.id, sm.name\n             FROM meals_selected_meals msm\n             JOIN selected_meals sm ON msm.selected_meal_id = sm.id\n             WHERE msm.meal_id = $1",[r]);console.debug("Fetched selected meals:",a.rows);const n=await m.query("SELECT fp.id, fp.name\n             FROM meals_food_preferences mfp\n             JOIN food_preferences fp ON mfp.food_preference_id = fp.id\n             WHERE mfp.meal_id = $1",[r]);console.debug("Fetched food preferences:",n.rows);const c=await m.query("SELECT dr.id, dr.restriction\n             FROM meals_dietary_restrictions mdr\n             JOIN dietary_restrictions dr ON mdr.dietary_restriction_id = dr.id\n             WHERE mdr.meal_id = $1",[r]);console.debug("Fetched dietary restrictions:",c.rows),s.status(200).json({...t,mealTypes:o.rows,selectedMeals:a.rows,foodPreferences:n.rows,dietaryRestrictions:c.rows})}catch(e){console.error("Error fetching menu:",e.stack),s.status(500).json({message:"Internal server error",error:e.message})}})),i.get("/api/meal-types",(async(e,s)=>{try{const e=await m.query("SELECT id, name FROM meal_types");console.debug("Meal types fetched:",e.rows),s.status(200).json(e.rows)}catch(e){console.error("Error fetching meal types:",e.stack),s.status(500).json({message:"Error fetching meal types",error:e.message})}})),i.get("/api/food-preferences",(async(e,s)=>{try{const e=await m.query("SELECT * FROM food_preferences");console.debug("Food preferences fetched:",e.rows),s.status(200).json(e.rows)}catch(e){console.error("Error fetching food preferences:",e.stack),s.status(500).json({message:"Error fetching food preferences",error:e.message})}})),i.get("/api/dietary-restrictions",(async(e,s)=>{try{const e=await m.query("SELECT * FROM dietary_restrictions");console.debug("Dietary restrictions fetched:",e.rows),s.status(200).json(e.rows)}catch(e){console.error("Error fetching dietary restrictions:",e.stack),s.status(500).json({message:"Error fetching dietary restrictions",error:e.message})}})),i.get("/api/selected-meals",(async(e,s)=>{try{const e=await m.query("SELECT * FROM selected_meals");console.debug("Selected meals fetched:",e.rows),s.status(200).json(e.rows)}catch(e){console.error("Error fetching selected meals:",e.stack),s.status(500).json({message:"Error fetching selected meals",error:e.message})}})),i.use(t.static(n.join(__dirname,"../../frontend/build"))),i.get("*",((e,s)=>{s.sendFile(n.join(__dirname,"../../frontend/build","index.html"))})),i.listen(d,(()=>{console.log(`Server is running on http://localhost:${d}`)}))})();