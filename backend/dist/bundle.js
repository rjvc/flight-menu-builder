(()=>{var e={790:(e,r,s)=>{const t=s(37),o=new t.Schema({name:String,email:String,airport:String,numPassengers:Number,numCrew:Number,mealType:String,selectedMeals:[String],breakfastType:String,foodPreferences:Object,dietaryRestrictions:[String],drinkPreference:String,device:String,timestamp:Date,ip:String}),n=t.model("MealData",o);e.exports=n},577:e=>{"use strict";e.exports=require("cors")},818:e=>{"use strict";e.exports=require("dotenv")},252:e=>{"use strict";e.exports=require("express")},37:e=>{"use strict";e.exports=require("mongoose")},928:e=>{"use strict";e.exports=require("path")}},r={};function s(t){var o=r[t];if(void 0!==o)return o.exports;var n=r[t]={exports:{}};return e[t](n,n.exports,s),n.exports}const t=s(252),o=s(577),n=s(37),a=s(928),i=t(),c=process.env.PORT||3001,u=s(790),g=s(818).config();if(g.error)throw g.error;console.log(g.parsed),n.connect(process.env.MONGODB_URI,{useNewUrlParser:!0,useUnifiedTopology:!0}).then((()=>console.log("Connected to MongoDB Atlas"))).catch((e=>console.log("Error connecting to MongoDB:",e))),i.use(t.json()),i.use(o({origin:"http://localhost:3000"})),i.post("/api/save-meal-data",(async(e,r)=>{try{const s=new u(e.body);await s.save(),r.status(200).json({message:"Meal data saved successfully!"})}catch(e){console.error("Error saving data:",e),r.status(500).json({message:"Error saving data",error:e.message})}})),i.get("/api/menu/:id",(async(e,r)=>{const s=e.params.id;console.log(`Fetching menu data for ID: ${s}`);try{const e=await u.findById(s);console.log("Menu data fetched:",e),e?r.status(200).json(e):r.status(404).json({message:"Menu not found"})}catch(e){console.error("Error fetching menu:",e),r.status(500).json({message:"Internal server error",error:e.message})}})),i.use(t.static(a.join(__dirname,"../../frontend/build"))),i.get("*",((e,r)=>{r.sendFile(a.join(__dirname,"../../frontend/build","index.html"))})),i.listen(c,(()=>{console.log(`Server is running on http://localhost:${c}`)}))})();